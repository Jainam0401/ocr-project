{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/Desktop/ocr-project/app/api/extract-text/route.ts"],"sourcesContent":["// app/api/extract-text/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport { pdfToPng } from \"pdf-to-png-converter\";\r\nimport Tesseract from \"tesseract.js\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  let tempDir: string | null = null;\r\n  \r\n  try {\r\n    const formData = await req.formData();\r\n    const file = formData.get(\"file\") as File;\r\n\r\n    if (!file) {\r\n      return NextResponse.json({ success: false, error: \"No file uploaded\" }, { status: 400 });\r\n    }\r\n\r\n    // Create unique temp directory to avoid conflicts\r\n    tempDir = path.join(process.cwd(), \"temp\", `upload-${Date.now()}`);\r\n    await fs.mkdir(tempDir, { recursive: true });\r\n\r\n    // Convert File -> Buffer and save\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const buffer = Buffer.from(arrayBuffer);\r\n    const pdfPath = path.join(tempDir, \"input.pdf\");\r\n    await fs.writeFile(pdfPath, buffer);\r\n\r\n    // Convert PDF â†’ PNG images using pdf-to-png-converter\r\n    const pngPages = await pdfToPng(pdfPath, {\r\n      outputFolder: tempDir,\r\n      viewportScale: 2.0, // Higher quality\r\n    });\r\n\r\n    let extractedText = \"\";\r\n\r\n    // Process each page with Tesseract\r\n    for (let i = 0; i < pngPages.length; i++) {\r\n      const imagePath = pngPages[i].path;\r\n      \r\n      try {\r\n        const result = await Tesseract.recognize(imagePath, \"eng\", {\r\n          logger: (m) => console.log(m), // Optional: log progress\r\n        });\r\n        extractedText += `--- Page ${i + 1} ---\\n${result.data.text}\\n\\n`;\r\n      } catch (tesseractError) {\r\n        console.error(`Error processing page ${i + 1}:`, tesseractError);\r\n        extractedText += `--- Page ${i + 1} ---\\n[Error extracting text]\\n\\n`;\r\n      }\r\n    }\r\n\r\n    console.log(\"Extracted text length:\", extractedText.length);\r\n    \r\n    return NextResponse.json({ \r\n      success: true, \r\n      text: extractedText.trim(),\r\n      pageCount: pngPages.length \r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error(\"PDF processing error:\", error);\r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: error.message || \"Failed to process PDF\" \r\n    }, { status: 500 });\r\n\r\n  } finally {\r\n    // Cleanup temp directory\r\n    if (tempDir) {\r\n      try {\r\n        await fs.rm(tempDir, { recursive: true, force: true });\r\n      } catch (cleanupError) {\r\n        console.error(\"Cleanup error:\", cleanupError);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;AAChC;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI,UAAyB;IAE7B,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxF;QAEA,kDAAkD;QAClD,UAAU,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,KAAK,GAAG,IAAI;QACjE,MAAM,gIAAE,CAAC,KAAK,CAAC,SAAS;YAAE,WAAW;QAAK;QAE1C,kCAAkC;QAClC,MAAM,cAAc,MAAM,KAAK,WAAW;QAC1C,MAAM,SAAS,OAAO,IAAI,CAAC;QAC3B,MAAM,UAAU,4GAAI,CAAC,IAAI,CAAC,SAAS;QACnC,MAAM,gIAAE,CAAC,SAAS,CAAC,SAAS;QAE5B,sDAAsD;QACtD,MAAM,WAAW,MAAM,IAAA,2KAAQ,EAAC,SAAS;YACvC,cAAc;YACd,eAAe;QACjB;QAEA,IAAI,gBAAgB;QAEpB,mCAAmC;QACnC,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;YACxC,MAAM,YAAY,QAAQ,CAAC,EAAE,CAAC,IAAI;YAElC,IAAI;gBACF,MAAM,SAAS,MAAM,4JAAS,CAAC,SAAS,CAAC,WAAW,OAAO;oBACzD,QAAQ,CAAC,IAAM,QAAQ,GAAG,CAAC;gBAC7B;gBACA,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACnE,EAAE,OAAO,gBAAgB;gBACvB,QAAQ,KAAK,CAAC,CAAC,sBAAsB,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;gBACjD,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,iCAAiC,CAAC;YACvE;QACF;QAEA,QAAQ,GAAG,CAAC,0BAA0B,cAAc,MAAM;QAE1D,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,cAAc,IAAI;YACxB,WAAW,SAAS,MAAM;QAC5B;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,MAAM,OAAO,IAAI;QAC1B,GAAG;YAAE,QAAQ;QAAI;IAEnB,SAAU;QACR,yBAAyB;QACzB,IAAI,SAAS;YACX,IAAI;gBACF,MAAM,gIAAE,CAAC,EAAE,CAAC,SAAS;oBAAE,WAAW;oBAAM,OAAO;gBAAK;YACtD,EAAE,OAAO,cAAc;gBACrB,QAAQ,KAAK,CAAC,kBAAkB;YAClC;QACF;IACF;AACF","debugId":null}}]
}