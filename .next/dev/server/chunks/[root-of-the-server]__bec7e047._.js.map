{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/Desktop/ocr-project/app/api/extract-text/route.ts"],"sourcesContent":["// app/api/extract-text/route.ts\r\nexport const runtime = \"nodejs\"; // Ensure full Node.js runtime\r\n\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport { fromPath } from \"pdf2pic\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport tesseract from \"node-tesseract-ocr\";\r\n\r\nexport const maxDuration = 300; // 5 minutes max\r\nexport const dynamic = \"force-dynamic\";\r\n\r\ninterface OCRProgress {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  status: string;\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  let tempDir: string | null = null;\r\n  let pdfPath: string | null = null;\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    const formData = await req.formData();\r\n    const file = formData.get(\"file\") as File;\r\n    const language = (formData.get(\"language\") as string) || \"eng\";\r\n\r\n    if (!file) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"No file uploaded\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!file.name.toLowerCase().endsWith(\".pdf\")) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Only PDF files are supported\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create unique temp directory\r\n    const uniqueId = uuidv4();\r\n    tempDir = path.join(process.cwd(), \"temp\", uniqueId);\r\n    await fs.mkdir(tempDir, { recursive: true });\r\n\r\n    // Save uploaded PDF\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const buffer = Buffer.from(arrayBuffer);\r\n    pdfPath = path.join(tempDir, `${uniqueId}.pdf`);\r\n    await fs.writeFile(pdfPath, buffer);\r\n\r\n    console.log(`üìÑ Uploaded: ${file.name} (${(buffer.length / 1024).toFixed(2)} KB)`);\r\n\r\n    // Get page count using pdf-lib\r\n    const pdfLib = await import(\"pdf-lib\");\r\n    const pdfDoc = await pdfLib.PDFDocument.load(buffer);\r\n    const totalPages = pdfDoc.getPageCount();\r\n    console.log(`üìä Total pages: ${totalPages}`);\r\n\r\n    // Initialize pdf2pic converter\r\n    const convert = fromPath(pdfPath, {\r\n      density: 300,\r\n      saveFilename: \"page\",\r\n      savePath: tempDir,\r\n      format: \"png\",\r\n      width: 2480,\r\n      height: 3508,\r\n    });\r\n\r\n    // OCR config\r\n    const config = {\r\n      lang: language,\r\n      oem: 1,\r\n      psm: 3,\r\n    };\r\n\r\n    let extractedText = \"\";\r\n    const progress: OCRProgress[] = [];\r\n\r\n    // Process each page\r\n    for (let pageNum = 1; pageNum <= totalPages; pageNum++) {\r\n      try {\r\n        console.log(`\\nüìÑ Converting page ${pageNum}/${totalPages} to image...`);\r\n        await convert(pageNum, { responseType: \"image\" });\r\n\r\n        const files = await fs.readdir(tempDir);\r\n        const imageName = files.find(\r\n          (f) => f.includes(`page.${pageNum}`) && f.endsWith(\".png\")\r\n        );\r\n\r\n        if (!imageName) {\r\n          console.error(`‚ùå Image not found for page ${pageNum}`);\r\n          extractedText += `\\n\\n--- Page ${pageNum} ---\\n[Conversion Error]\\n`;\r\n          continue;\r\n        }\r\n\r\n        const imagePath = path.join(tempDir, imageName);\r\n        console.log(`üîç Running OCR on page ${pageNum}...`);\r\n\r\n        const text = await tesseract.recognize(imagePath, config);\r\n        extractedText += `\\n\\n--- Page ${pageNum} ---\\n${text}`;\r\n\r\n        progress.push({\r\n          currentPage: pageNum,\r\n          totalPages,\r\n          status: `Completed page ${pageNum}`,\r\n        });\r\n\r\n        console.log(`‚úÖ Page ${pageNum} OCR done`);\r\n      } catch (err: any) {\r\n        console.error(`‚ùå OCR failed on page ${pageNum}:`, err.message);\r\n        extractedText += `\\n\\n--- Page ${pageNum} ---\\n[Error: ${err.message}]\\n`;\r\n      }\r\n    }\r\n\r\n    const totalTime = ((Date.now() - startTime) / 1000).toFixed(2);\r\n\r\n    console.log(`\\n‚ú® OCR extraction completed in ${totalTime}s`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      text: extractedText.trim(),\r\n      metadata: {\r\n        fileName: file.name,\r\n        fileSize: `${(buffer.length / 1024).toFixed(2)} KB`,\r\n        totalPages,\r\n        language,\r\n        processingTime: `${totalTime}s`,\r\n      },\r\n      progress,\r\n    });\r\n  } catch (error: any) {\r\n    console.error(\"‚ùå Error processing PDF:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: error.message || \"Failed to process PDF\",\r\n        details: error.stack,\r\n      },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    // Cleanup\r\n    if (tempDir) {\r\n      try {\r\n        await fs.rm(tempDir, { recursive: true, force: true });\r\n        console.log(\"üßπ Cleaned up temp files\");\r\n      } catch (cleanupError: any) {\r\n        console.error(\"‚ö†Ô∏è Cleanup error:\", cleanupError.message);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Health check\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    status: \"healthy\",\r\n    endpoint: \"/api/extract-text\",\r\n    methods: [\"POST\"],\r\n    description: \"OCR API for PDF text extraction (using node-tesseract-ocr)\",\r\n  });\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}