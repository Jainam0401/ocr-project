{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/Desktop/ocr-project/app/api/extract-text/route.ts"],"sourcesContent":["// app/api/extract-text/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport Tesseract from \"tesseract.js\";\r\nimport { createWorker } from \"tesseract.js\";\r\n// Using pdf-parse for simple text extraction or pdfjs-dist for rendering\r\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\r\n\r\n// Set worker path for PDF.js\r\nif (typeof window === \"undefined\") {\r\n  const pdfjsWorker = await import(\"pdfjs-dist/legacy/build/pdf.worker.entry\");\r\n  pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n}\r\n\r\nexport const maxDuration = 60; // Set max duration for this route (replaces config)\r\nexport const dynamic = 'force-dynamic'; // Don't cache this route\r\n\r\nexport async function POST(req: NextRequest) {\r\n  let tempDir: string | null = null;\r\n  \r\n  try {\r\n    const formData = await req.formData();\r\n    const file = formData.get(\"file\") as File;\r\n\r\n    if (!file) {\r\n      return NextResponse.json({ success: false, error: \"No file uploaded\" }, { status: 400 });\r\n    }\r\n\r\n    // Create unique temp directory\r\n    tempDir = path.join(process.cwd(), \"temp\", `upload-${Date.now()}`);\r\n    await fs.mkdir(tempDir, { recursive: true });\r\n\r\n    // Convert File -> Buffer\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const buffer = Buffer.from(arrayBuffer);\r\n    const pdfPath = path.join(tempDir, \"input.pdf\");\r\n    await fs.writeFile(pdfPath, buffer);\r\n\r\n    // Load PDF with pdfjs-dist\r\n    const loadingTask = pdfjsLib.getDocument({\r\n      data: new Uint8Array(buffer),\r\n    });\r\n    const pdfDocument = await loadingTask.promise;\r\n    \r\n    let extractedText = \"\";\r\n    const numPages = pdfDocument.numPages;\r\n\r\n    console.log(`Processing ${numPages} pages...`);\r\n\r\n    // Create Tesseract worker\r\n    const worker = await createWorker(\"eng\");\r\n\r\n    for (let pageNum = 1; pageNum <= numPages; pageNum++) {\r\n      try {\r\n        const page = await pdfDocument.getPage(pageNum);\r\n        const viewport = page.getViewport({ scale: 2.0 });\r\n\r\n        // Create canvas\r\n        const { createCanvas } = await import(\"canvas\");\r\n        const canvas = createCanvas(viewport.width, viewport.height);\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        // Render PDF page to canvas\r\n        await page.render({\r\n          canvasContext: context as any,\r\n          viewport: viewport,\r\n        }).promise;\r\n\r\n        // Convert canvas to buffer\r\n        const imageBuffer = canvas.toBuffer(\"image/png\");\r\n        const imagePath = path.join(tempDir, `page-${pageNum}.png`);\r\n        await fs.writeFile(imagePath, imageBuffer);\r\n\r\n        // OCR the image\r\n        const { data } = await worker.recognize(imagePath);\r\n        extractedText += `--- Page ${pageNum} ---\\n${data.text}\\n\\n`;\r\n\r\n        console.log(`Processed page ${pageNum}/${numPages}`);\r\n      } catch (pageError) {\r\n        console.error(`Error processing page ${pageNum}:`, pageError);\r\n        extractedText += `--- Page ${pageNum} ---\\n[Error extracting text]\\n\\n`;\r\n      }\r\n    }\r\n\r\n    await worker.terminate();\r\n\r\n    console.log(\"Extracted text length:\", extractedText.length);\r\n    \r\n    return NextResponse.json({ \r\n      success: true, \r\n      text: extractedText.trim(),\r\n      pageCount: numPages \r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error(\"PDF processing error:\", error);\r\n    return NextResponse.json({ \r\n      success: false, \r\n      error: error.message || \"Failed to process PDF\" \r\n    }, { status: 500 });\r\n\r\n  } finally {\r\n    // Cleanup temp directory\r\n    if (tempDir) {\r\n      try {\r\n        await fs.rm(tempDir, { recursive: true, force: true });\r\n      } catch (cleanupError) {\r\n        console.error(\"Cleanup error:\", cleanupError);\r\n      }\r\n    }\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}