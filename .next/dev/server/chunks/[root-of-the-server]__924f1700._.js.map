{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/Desktop/ocr-project/app/api/extract-text/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { convert } from \"pdf-poppler\";\r\nimport Tesseract from \"tesseract.js\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const formData = await req.formData();\r\n    console.log(formData);\r\n    const file = formData.get(\"file\") as File;\r\n\r\n    if (!file) {\r\n      return NextResponse.json({ success: false, message: \"No file uploaded\" }, { status: 400 });\r\n    }\r\n\r\n    // Convert File -> Buffer\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const buffer = Buffer.from(arrayBuffer);\r\n\r\n    // Save to disk temporarily\r\n    const tempDir = path.join(process.cwd(), \"temp\");\r\n    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);\r\n    const pdfPath = path.join(tempDir, file.name);\r\n    fs.writeFileSync(pdfPath, buffer);\r\n\r\n    // Convert PDF â†’ images\r\n    const opts = {\r\n      format: \"jpeg\",\r\n      out_dir: tempDir,\r\n      out_prefix: \"page\",\r\n      page: null,\r\n    };\r\n\r\n    await convert(pdfPath, opts);\r\n    const images = fs.readdirSync(tempDir).filter(f => f.endsWith(\".jpg\"));\r\n\r\n    let extractedText = \"\";\r\n\r\n    for (const img of images) {\r\n      const result = await Tesseract.recognize(path.join(tempDir, img), \"eng\");\r\n      extractedText += result.data.text + \"\\n\";\r\n    }\r\n\r\n    // Cleanup\r\n    images.forEach(img => fs.unlinkSync(path.join(tempDir, img)));\r\n    fs.unlinkSync(pdfPath);\r\n    console.log(extractedText,\"extractedText\");\r\n    return NextResponse.json({ success: true, text: extractedText.trim() });\r\n  } catch (error: any) {\r\n    return NextResponse.json({ success: false, error: error.message });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,yBAAyB;QACzB,MAAM,cAAc,MAAM,KAAK,WAAW;QAC1C,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,2BAA2B;QAC3B,MAAM,UAAU,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QACzC,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,UAAU,wGAAE,CAAC,SAAS,CAAC;QAC1C,MAAM,UAAU,4GAAI,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI;QAC5C,wGAAE,CAAC,aAAa,CAAC,SAAS;QAE1B,uBAAuB;QACvB,MAAM,OAAO;YACX,QAAQ;YACR,SAAS;YACT,YAAY;YACZ,MAAM;QACR;QAEA,MAAM,IAAA,oJAAO,EAAC,SAAS;QACvB,MAAM,SAAS,wGAAE,CAAC,WAAW,CAAC,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,QAAQ,CAAC;QAE9D,IAAI,gBAAgB;QAEpB,KAAK,MAAM,OAAO,OAAQ;YACxB,MAAM,SAAS,MAAM,4JAAS,CAAC,SAAS,CAAC,4GAAI,CAAC,IAAI,CAAC,SAAS,MAAM;YAClE,iBAAiB,OAAO,IAAI,CAAC,IAAI,GAAG;QACtC;QAEA,UAAU;QACV,OAAO,OAAO,CAAC,CAAA,MAAO,wGAAE,CAAC,UAAU,CAAC,4GAAI,CAAC,IAAI,CAAC,SAAS;QACvD,wGAAE,CAAC,UAAU,CAAC;QACd,QAAQ,GAAG,CAAC,eAAc;QAC1B,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM,cAAc,IAAI;QAAG;IACvE,EAAE,OAAO,OAAY;QACnB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC;IAClE;AACF","debugId":null}}]
}