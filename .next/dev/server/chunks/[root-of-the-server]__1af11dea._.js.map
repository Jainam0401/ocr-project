{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/Desktop/ocr-project/app/api/extract-text/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { IncomingForm } from \"formidable\";\r\nimport { convert } from \"pdf-poppler\";\r\nimport Tesseract from \"tesseract.js\";\r\n\r\n\r\n\r\nexport async function POST(req: NextRequest) {\r\n    return NextResponse.json({ success: false, error: \"Not implemented\" });  \r\n\r\n//return new Promise((resolve, reject) => {\r\n//     const form = new IncomingForm({ multiples: false });\r\n//     form.parse(req as any, async (err, fields, files) => {\r\n//       if (err) return reject(NextResponse.json({ success: false, error: err.message }));\r\n\r\n//       const file = files.file[0];\r\n//       const inputPath = file.filepath;\r\n//       const outputDir = path.join(process.cwd(), \"temp\");\r\n//       if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);\r\n\r\n//       const opts = {\r\n//         format: \"jpeg\",\r\n//         out_dir: outputDir,\r\n//         out_prefix: \"page\",\r\n//         page: null,\r\n//       };\r\n\r\n//       try {\r\n//         // Convert PDF pages â†’ images\r\n//         await convert(inputPath, opts);\r\n//         const images = fs.readdirSync(outputDir).filter(f => f.endsWith(\".jpg\"));\r\n\r\n//         let extractedText = \"\";\r\n\r\n//         // OCR each image\r\n//         for (const img of images) {\r\n//           const result = await Tesseract.recognize(path.join(outputDir, img), \"eng\");\r\n//           extractedText += result.data.text + \"\\n\";\r\n//         }\r\n\r\n//         // Cleanup\r\n//         images.forEach(img => fs.unlinkSync(path.join(outputDir, img)));\r\n//         fs.unlinkSync(inputPath);\r\n\r\n//         resolve(\r\n//           NextResponse.json({\r\n//             success: true,\r\n//             text: extractedText.trim(),\r\n//           })\r\n//         );\r\n//       } catch (error: any) {\r\n//         reject(NextResponse.json({ success: false, error: error.message }));\r\n//       }\r\n//     });\r\n//   });\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AASO,eAAe,KAAK,GAAgB;IACvC,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAO,OAAO;IAAkB;AAExE,2CAA2C;AAC3C,2DAA2D;AAC3D,6DAA6D;AAC7D,2FAA2F;AAE3F,oCAAoC;AACpC,yCAAyC;AACzC,4DAA4D;AAC5D,gEAAgE;AAEhE,uBAAuB;AACvB,0BAA0B;AAC1B,8BAA8B;AAC9B,8BAA8B;AAC9B,sBAAsB;AACtB,WAAW;AAEX,cAAc;AACd,wCAAwC;AACxC,0CAA0C;AAC1C,oFAAoF;AAEpF,kCAAkC;AAElC,4BAA4B;AAC5B,sCAAsC;AACtC,wFAAwF;AACxF,sDAAsD;AACtD,YAAY;AAEZ,qBAAqB;AACrB,2EAA2E;AAC3E,oCAAoC;AAEpC,mBAAmB;AACnB,gCAAgC;AAChC,6BAA6B;AAC7B,0CAA0C;AAC1C,eAAe;AACf,aAAa;AACb,+BAA+B;AAC/B,+EAA+E;AAC/E,UAAU;AACV,UAAU;AACV,QAAQ;AACR","debugId":null}}]
}