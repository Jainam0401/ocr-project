{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ASUS/Desktop/ocr-project/app/api/extract-text/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { IncomingForm } from \"formidable\";\r\nimport { convert } from \"pdf-poppler\";\r\nimport Tesseract from \"tesseract.js\";\r\n\r\n\r\n\r\nexport async function POST(req: NextRequest) {\r\n\r\nreturn new Promise((resolve, reject) => {\r\n    const form = new IncomingForm({ multiples: false });\r\n    form.parse(req as any, async (err, fields, files) => {\r\n      if (err) return reject(NextResponse.json({ success: false, error: err.message }));\r\n\r\n      const file = files.file[0];\r\n      const inputPath = file.filepath;\r\n      const outputDir = path.join(process.cwd(), \"temp\");\r\n      if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);\r\n\r\n      const opts = {\r\n        format: \"jpeg\",\r\n        out_dir: outputDir,\r\n        out_prefix: \"page\",\r\n        page: null,\r\n      };\r\n\r\n      try {\r\n        // Convert PDF pages â†’ images\r\n        await convert(inputPath, opts);\r\n        const images = fs.readdirSync(outputDir).filter(f => f.endsWith(\".jpg\"));\r\n\r\n        let extractedText = \"\";\r\n\r\n        // OCR each image\r\n        for (const img of images) {\r\n          const result = await Tesseract.recognize(path.join(outputDir, img), \"eng\");\r\n          extractedText += result.data.text + \"\\n\";\r\n        }\r\n\r\n        // Cleanup\r\n        images.forEach(img => fs.unlinkSync(path.join(outputDir, img)));\r\n        fs.unlinkSync(inputPath);\r\n\r\n        resolve(\r\n          NextResponse.json({\r\n            success: true,\r\n            text: extractedText.trim(),\r\n          })\r\n        );\r\n      } catch (error: any) {\r\n        reject(NextResponse.json({ success: false, error: error.message }));\r\n      }\r\n    });\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;AAIO,eAAe,KAAK,GAAgB;IAE3C,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,MAAM,OAAO,IAAI,4MAAY,CAAC;YAAE,WAAW;QAAM;QACjD,KAAK,KAAK,CAAC,KAAY,OAAO,KAAK,QAAQ;YACzC,IAAI,KAAK,OAAO,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO,IAAI,OAAO;YAAC;YAE9E,MAAM,OAAO,MAAM,IAAI,CAAC,EAAE;YAC1B,MAAM,YAAY,KAAK,QAAQ;YAC/B,MAAM,YAAY,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;YAC3C,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,YAAY,wGAAE,CAAC,SAAS,CAAC;YAE5C,MAAM,OAAO;gBACX,QAAQ;gBACR,SAAS;gBACT,YAAY;gBACZ,MAAM;YACR;YAEA,IAAI;gBACF,6BAA6B;gBAC7B,MAAM,IAAA,oJAAO,EAAC,WAAW;gBACzB,MAAM,SAAS,wGAAE,CAAC,WAAW,CAAC,WAAW,MAAM,CAAC,CAAA,IAAK,EAAE,QAAQ,CAAC;gBAEhE,IAAI,gBAAgB;gBAEpB,iBAAiB;gBACjB,KAAK,MAAM,OAAO,OAAQ;oBACxB,MAAM,SAAS,MAAM,4JAAS,CAAC,SAAS,CAAC,4GAAI,CAAC,IAAI,CAAC,WAAW,MAAM;oBACpE,iBAAiB,OAAO,IAAI,CAAC,IAAI,GAAG;gBACtC;gBAEA,UAAU;gBACV,OAAO,OAAO,CAAC,CAAA,MAAO,wGAAE,CAAC,UAAU,CAAC,4GAAI,CAAC,IAAI,CAAC,WAAW;gBACzD,wGAAE,CAAC,UAAU,CAAC;gBAEd,QACE,gJAAY,CAAC,IAAI,CAAC;oBAChB,SAAS;oBACT,MAAM,cAAc,IAAI;gBAC1B;YAEJ,EAAE,OAAO,OAAY;gBACnB,OAAO,gJAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;oBAAO,OAAO,MAAM,OAAO;gBAAC;YAClE;QACF;IACF;AACF","debugId":null}}]
}